{%- set source_s3_uris = [] -%}
{%- set source_s3_paths = [] -%}

{%- for bucket, prefixes in s3_objects_map.items() -%}
    {%- set source_s3_keys = bucket | s3_list_keys(prefixes) | list %}
    {%- do source_s3_uris.extend(source_s3_keys | map("regex_replace", ".*", "s3://" ~ bucket ~ "/\g<0>") | list) -%}
    {%- do source_s3_paths.extend(source_s3_keys | map("dirname") | list) -%}
{%- endfor -%}

locals {
  source_s3_uris  = "${list({{ source_s3_uris | map("regex_replace", ".*", '"\g<0>"') | join(",") }})}"
  source_s3_paths = "${list({{ source_s3_paths | map("regex_replace", ".*", '"\g<0>/"') | join(",") }})}"

  source_s3_uri_map = "${zipmap(local.source_s3_uris, local.source_s3_paths)}"

  uri_map  = "${merge(var.uri_map, local.source_s3_uri_map)}"
  uris     = "${keys(local.uri_map)}"
  s3_paths = "${concat(values(local.uri_map), list("NULL"))}"

  bucket_policy_vars = {
    bucket_name = "${var.bucket_name}"
    prefix      = "${var.prefix}"
    account_id  = "${data.aws_caller_identity.current.account_id}"
    partition   = "${data.aws_partition.current.partition}"
    region      = "${data.aws_region.current.name}"
  }
}

data "aws_caller_identity" "current" {}

data "aws_partition" "current" {}

data "aws_region" "current" {}

data "template_file" "bucket_policy" {
  count = "${var.bucket_policy != "" ? 1 : 0}"

  template = "${file(var.bucket_policy)}"

  vars = "${merge(local.bucket_policy_vars, var.bucket_policy_vars)}"
}

resource "aws_s3_bucket" "this" {
  count = "${var.create_bucket ? 1 : 0}"

  bucket = "${var.bucket_name}"
  force_destroy = "${var.force_destroy}"
}

resource "aws_s3_bucket_policy" "this" {
  count = "${var.bucket_policy != "" ? 1 : 0}"

  bucket = "${aws_s3_bucket.this.id}"
  policy = "${data.template_file.bucket_policy.rendered}"
}

locals {
  bucket_name = "${var.create_bucket ? join("", aws_s3_bucket.this.*.id) : var.bucket_name}"
}

module "file_cache" {
  source = "git::https://github.com/plus3it/terraform-external-file-cache.git?ref=1.3.0"

  python_cmd = "${var.python_cmd}"
  uris       = "${local.uris}"
}

module "salt_reposync" {
  source = "git::https://github.com/plus3it/salt-reposync.git?ref=2.0.4"

  bucket_name         = "${local.bucket_name}"
  repo_prefix         = "${var.salt_repo_prefix}"
  yum_prefix          = "${var.salt_yum_prefix}"
  salt_version        = "${var.salt_version}"
  extra_salt_versions = "${var.extra_salt_versions}"
}

data "null_data_source" "files" {
  count = "${length(module.file_cache.filepaths)}"

  inputs {
    filepath     = "${module.file_cache.filepaths[count.index]}"
    key          = "${var.prefix}${local.s3_paths[count.index]}${basename(module.file_cache.filepaths[count.index])}"
    hash_content = "${sha512(file(module.file_cache.filepaths[count.index]))} ${basename(module.file_cache.filepaths[count.index])}"
  }
}

locals {
  uri_to_filepath     = "${zipmap(local.uris, data.null_data_source.files.*.outputs.filepath)}"
  uri_to_key          = "${zipmap(local.uris, data.null_data_source.files.*.outputs.key)}"
  uri_to_hash_content = "${zipmap(local.uris, data.null_data_source.files.*.outputs.hash_content)}"
}

{% for uri in uri_map.keys() %}
resource "aws_s3_bucket_object" "file_{{ uri | sha256 }}" {
  bucket = "${local.bucket_name}"
  key    = "${lookup(local.uri_to_key, "{{ uri }}")}"
  source = "${lookup(local.uri_to_filepath, "{{ uri }}")}"
  etag   = "${md5(file(lookup(local.uri_to_filepath, "{{ uri }}")))}"

  lifecycle {
    ignore_changes = [
      "source"
    ]
  }
}

resource "aws_s3_bucket_object" "hash_{{ uri | sha256 }}" {
  bucket       = "${local.bucket_name}"
  key          = "${lookup(local.uri_to_key, "{{ uri }}")}.SHA512"
  content      = "${lookup(local.uri_to_hash_content, "{{ uri }}")}"
  content_type = "application/octet-stream"
  etag         = "${md5(lookup(local.uri_to_hash_content, "{{ uri }}"))}"
}
{% endfor %}

{% for uri in source_s3_uris %}
resource "aws_s3_bucket_object" "file_{{ uri | sha256 }}" {
  bucket = "${local.bucket_name}"
  key    = "${lookup(local.uri_to_key, "{{ uri }}")}"
  source = "${lookup(local.uri_to_filepath, "{{ uri }}")}"
  etag   = "${md5(file(lookup(local.uri_to_filepath, "{{ uri }}")))}"

  lifecycle {
    ignore_changes = [
      "source"
    ]
  }
}
{% endfor %}
