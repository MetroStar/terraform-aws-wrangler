{%- set source_s3_uris = [] -%}
{%- set source_s3_paths = [] -%}

{%- for bucket, prefixes in s3_objects_map.items() -%}
    {%- set source_s3_keys = bucket | s3_list_keys(prefixes) | list %}
    {%- do source_s3_uris.extend(source_s3_keys | map("regex_replace", ".*", "s3://" ~ bucket ~ "/\g<0>") | list) -%}
    {%- do source_s3_paths.extend(source_s3_keys | map("dirname") | list) -%}
{%- endfor -%}

locals {
  source_s3_uris  = "${list({{ source_s3_uris | map("regex_replace", ".*", '"\g<0>"') | join(",") }})}"
  source_s3_paths = "${list({{ source_s3_paths | map("regex_replace", ".*", '"\g<0>/"') | join(",") }})}"

  source_s3_uri_map = "${zipmap(local.source_s3_uris, local.source_s3_paths)}"

  uri_map  = "${merge(var.uri_map, local.source_s3_uri_map)}"
  uris     = "${keys(local.uri_map)}"
  s3_paths = "${values(local.uri_map)}"
}

data "template_file" "bucket_policy" {
  template = "${file(var.bucket_policy)}"

  vars {
    bucket_name = "${var.bucket_name}"
    prefix      = "${var.prefix}"
  }
}

resource "aws_s3_bucket" "this" {
  bucket = "${var.bucket_name}"
  policy = "${data.template_file.bucket_policy.rendered}"
}

module "file_cache" {
  source = "git::https://github.com/plus3it/terraform-external-file-cache?ref=1.2.0"

  uris = "${local.uris}"
}

module "salt_reposync" {
  source = "git::https://github.com/plus3it/salt-reposync?ref=1.0.0"

  # Remove trailing slash from salt repo prefix
  repo_base    = "https://s3.amazonaws.com/${aws_s3_bucket.this.id}/${var.prefix}${replace(var.salt_repo_prefix, "/[/]$/", "")}"
  salt_version = "${var.salt_version}"
}

data "null_data_source" "files" {
  count = "${length(module.file_cache.filepaths)}"

  inputs {
    filepath     = "${module.file_cache.filepaths[count.index]}"
    key          = "${var.prefix}${local.s3_paths[count.index]}${basename(module.file_cache.filepaths[count.index])}"
    hash_content = "${sha512(file(module.file_cache.filepaths[count.index]))} ${basename(module.file_cache.filepaths[count.index])}"
  }
}

locals {
  uri_to_filepath     = "${zipmap(local.uris, data.null_data_source.files.*.outputs.filepath)}"
  uri_to_key          = "${zipmap(local.uris, data.null_data_source.files.*.outputs.key)}"
  uri_to_hash_content = "${zipmap(local.uris, data.null_data_source.files.*.outputs.hash_content)}"
}

{% for uri in uri_map.keys() %}
resource "aws_s3_bucket_object" "file_{{ uri | sha256 }}" {
  bucket = "${aws_s3_bucket.this.id}"
  key    = "${lookup(local.uri_to_key, "{{ uri }}")}"
  source = "${lookup(local.uri_to_filepath, "{{ uri }}")}"
  etag   = "${md5(file(lookup(local.uri_to_filepath, "{{ uri }}")))}"

  lifecycle {
    ignore_changes = [
      "source"
    ]
  }
}

resource "aws_s3_bucket_object" "hash_{{ uri | sha256 }}" {
  bucket       = "${aws_s3_bucket.this.id}"
  key          = "${lookup(local.uri_to_key, "{{ uri }}")}.SHA512"
  content      = "${lookup(local.uri_to_hash_content, "{{ uri }}")}"
  content_type = "application/octet-stream"
  etag         = "${md5(lookup(local.uri_to_hash_content, "{{ uri }}"))}"
}
{% endfor %}

{% for uri in source_s3_uris %}
resource "aws_s3_bucket_object" "file_{{ uri | sha256 }}" {
  bucket = "${aws_s3_bucket.this.id}"
  key    = "${lookup(local.uri_to_key, "{{ uri }}")}"
  source = "${lookup(local.uri_to_filepath, "{{ uri }}")}"
  etag   = "${md5(file(lookup(local.uri_to_filepath, "{{ uri }}")))}"

  lifecycle {
    ignore_changes = [
      "source"
    ]
  }
}
{% endfor %}
