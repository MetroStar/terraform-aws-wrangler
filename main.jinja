{%- set source_s3_uris = [] -%}
{%- set source_s3_paths = [] -%}

{%- for bucket, prefixes in s3_objects_map.items() -%}
    {%- set source_s3_keys = bucket | s3_list_keys(prefixes) | list %}
    {%- do source_s3_uris.extend(source_s3_keys | map("regex_replace", ".*", "s3://" ~ bucket ~ "/\g<0>") | list) -%}
    {%- do source_s3_paths.extend(source_s3_keys | map("dirname") | list) -%}
{%- endfor -%}

locals {
  source_s3_uris  = [{{ source_s3_uris | map("regex_replace", ".*", '"\g<0>"') | join(",") }}]
  source_s3_paths = [{{ source_s3_paths | map("regex_replace", ".*", '"\g<0>/"') | join(",") }}]

  source_s3_uri_map = zipmap(local.source_s3_uris, local.source_s3_paths)

  uri_map  = merge(var.uri_map, local.source_s3_uri_map)
  uris     = keys(local.uri_map)
}

module "file_cache" {
  source = "git::https://github.com/plus3it/terraform-external-file-cache.git?ref=2.0.0"

  python_cmd = var.python_cmd
  uris       = local.uris
}

locals {
  uri_to_key = {
    for uri, filepath in module.file_cache.filepaths : uri => "${var.prefix}${local.uri_map[uri]}${basename(filepath)}"
  }

  uri_to_hash_content = {
    for uri, filepath in module.file_cache.filepaths : uri => "${filesha512(filepath)} ${basename(filepath)}"
  }
}

resource "aws_s3_bucket_object" "file" {
  for_each = local.uri_map

  bucket = var.bucket_name
  key    = local.uri_to_key[each.key]
  source = module.file_cache.filepaths[each.key]
  etag   = filemd5(module.file_cache.filepaths[each.key])
}

resource "aws_s3_bucket_object" "hash" {
  for_each = local.uri_map

  bucket       = var.bucket_name
  key          = "${local.uri_to_key[each.key]}.SHA512"
  content      = local.uri_to_hash_content[each.key]
  content_type = "application/octet-stream"
  etag         = md5(local.uri_to_hash_content[each.key])
}
